#define OVERSHELL_TRACK_CONTENTS
(
(os_cloneherohud os_brighthopos os_darkstrums os_gh1track os_gh3track os_voidfrets os_eyeballgems)
)
#define OVERSHELL_SCREEN_COMMON_HANDLER
(
   (allow_back FALSE)
   (animate_transition FALSE)
)
#define OVERSHELL_TRACK_RESET_HANDLER
(
   {set $trackmodifierlistpos {sel_section.lst selected_pos}}
   {if_else {&& {! {$this slider_selected}} $helpentered}
      {
         {do
            {sel_section.lst set_selected $trackmodifierlistpos}
            {$this reset}
         }
      }
      {
         {do
            {sel_section.lst set_data OVERSHELL_TRACK_CONTENTS}
            {ui push_screen overshell_help_screen}
         }
      }
   }
)
#define OVERSHELL_SNGTHM_RESET_HANDLER
(
   {
      {do
         {sel_section.lst set_selected $sngthmlistpos}
         {$this reset}
      }
   }
)
#define OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
(
   (BUTTON_DOWN_MSG
      {if
         {&&
            {! {$this slider_selected}} {== $button kPad_Tri}}
               {ui pop_screen}
      }
     kDataUnhandled
   )
)
#define OVERSHELL_HELP_POP_HANDLER
(
   {if_else
      {&&
         {! {$this slider_selected}} $helpentered}
      {$this reset}
      {ui pop_screen}
      {ui push_screen overshell_help_screen}
   }
)
#define TRACK_SLIDER_HANDLERS
(
   (focus gs_guitar.sld)
   (focus_component "")
   (reset_focus TRUE)
   (orig_vol 0)
   (finish_load
      {gs_band.sld set_num_steps 60}
      {gs_guitar.sld set_num_steps 31}
      {gs_sfx.sld set_num_steps 41} ; was 41 steps, dropped to 31 when disallowing <100%
   )
   (slider_changed
      {'||'
         {!=
            {options get band_volume_idx}
            {gs_guitar.sld current}
         }
         {!=
            {options get guitar_volume_idx}
            {gs_sfx.sld current}
         }
         {!=
            {options get guitar_volume_idx}
            {gs_band.sld current}
         }
      }
   )
   (enter
      {$this overshell_theme}
         {$this disable gs_sfx.sld}
         {$this disable gs_band.sld}
         {$this disable stereo.chk}
         {gs_sfx.sld set_showing FALSE}
         {gs_band.sld set_showing FALSE}
         {stereo.chk set_showing FALSE}
         {stereo.chk set_showing FALSE}
         {gs_stereo.btn set_text "FOCUS MODE"}
      {gs_guitar.sld set_current
         {int {+ 0.5 {/ {+ {- $trackcamx 1} 0.5} 0.1}}}
      }
      {$this display_speed_msg $trackcamx}
   )
   (reset_gm_title
      {gs_title.lbl set_localized_text TRACK_MODIFIER}
   )
   (display_speed_msg
      ($trackcamx)
      {gs_title.lbl set_localized_text
         {sprintf {localize width_msg}
            {int
               {+ 0.5 {* $trackcamx 100}}
            }
         }
      }
   )
   (set_speeds
      {if {$this slider_changed}
         {do
            {set $trackcamx
               {- {+ 1 {* {gs_guitar.sld current} 0.1}} 0.5}
            }
            {$this display_speed_msg $trackcamx}
         }
      }
   )
   (slider_select_cancel
      ($component)
      {switch $component
         (gs_guitar.sld {$component set_current [orig_vol]})
         (gs_sfx.sld {$component set_current [orig_vol]})
         (gs_band.sld {$component set_current [orig_vol]})
      }
      {$this update_help_display}
      {$this set_speeds}
      {$this display_speed_msg $trackcamx}
      kDataUnhandled
   )
   (FOCUS_MSG
      {$this set focus_component {$new_focus name}}
      {$this update_help_display}
   )
   (update_help_display
      {if_else {$this slider_selected}
         {helpbar set_display
            ((fret1 help_confirm)
               (fret2 help_cancel)
               (strum help_adjspd))
         }
         {do
            {if_else {== [focus_component] "gs_stereo.btn"}
               {helpbar set_display
                  ((fret1 help_onoff)
                     (fret2 help_back)
                     (strum help_updown))
               }
               {helpbar set_display
                  ((fret1 help_select)
                   (fret2 help_back)
                   (strum help_updown))
               }
            }
         }
      }
   )
   (slider_start_msg
      ($component)
      {do
         {switch $component
            (gs_guitar.sld
               {do
                  {play_sfx button_error (volume 1) (stop TRUE)}
                  {$this set_speeds}}
            )
         kDataUnhandled
         }
      }
   )
   (SELECT_START_MSG
      {switch $component
         (gs_guitar.sld {$this set orig_vol {gs_guitar.sld current}})
      kDataUnhandled
      }
      {$this update_help_display}
      {$this set_speeds}
      {$this display_speed_msg $trackcamx}
   )
)

#define COLORSWITCH_R
(
   {switch $colormenu
      (name $namecolor_r)
      (starpower $starpowercolor_r)
      (streaklabel $streaklabel_r)
      (starcounter $starcounter_r)
      (scorenumframe $scorenumframe_r)
      (gemcolor $gemcolor_r)
      (smashercolor $smashercolor_r)
      (trackrailcolor $trackrailcolor_r)
      (beatlinecolor $beatlinecolor_r)
   }
)
#define COLORSWITCH_G
(
   {switch $colormenu
      (name $namecolor_g)
      (starpower $starpowercolor_g)
      (streaklabel $streaklabel_g)
      (starcounter $starcounter_g)
      (scorenumframe $scorenumframe_g)
      (gemcolor $gemcolor_g)
      (smashercolor $smashercolor_g)
      (trackrailcolor $trackrailcolor_g)
      (beatlinecolor $beatlinecolor_g)
   }
)
#define COLORSWITCH_B
(
   {switch $colormenu
      (name $namecolor_b)
      (starpower $starpowercolor_b)
      (streaklabel $streaklabel_b)
      (starcounter $starcounter_b)
      (scorenumframe $scorenumframe_b)
      (gemcolor $gemcolor_b)
      (smashercolor $smashercolor_b)
      (trackrailcolor $trackrailcolor_b)
      (beatlinecolor $beatlinecolor_b)
   }
)
#define COLOR_SLIDER_HANDLERS
(
   (focus gs_guitar.sld)
   (focus_component "")
   (reset_focus TRUE)
   (orig_vol 0)
   (finish_load
      {gs_band.sld set_num_steps 100}
      {gs_guitar.sld set_num_steps 100}
      {gs_sfx.sld set_num_steps 100} ; was 41 steps, dropped to 31 when disallowing <100%
   )
   (slider_changed
      {'||'
         {!=
            {options get band_volume_idx}
            {gs_guitar.sld current}
         }
         {!=
            {options get guitar_volume_idx}
            {gs_sfx.sld current}
         }
         {!=
            {options get guitar_volume_idx}
            {gs_band.sld current}
         }
      }
   )
   (enter
      {$this overshell_theme}
      {gs_band.sld set_text RED}
      {gs_guitar.sld set_text GREEN}
      {gs_sfx.sld set_text BLUE}
      {gs_guitar.sld set_current
         {int {* COLORSWITCH_R 100}}
      }
      {gs_sfx.sld set_current
         {int {* COLORSWITCH_G 100}}
      }
      {gs_band.sld set_current
         {int {* COLORSWITCH_B 100}}
      }
      {stereo.chk set_showing FALSE}
      {$this disable stereo.chk}
      ;{gs_stereo.btn jitter FALSE}
      {gs_stereo.btn set_text "PICK ELEMENT"}
      ;{gs_stereo.btn set_showing FALSE}
      ;{$this disable gs_stereo.btn}
      {$this display_color_msg COLORSWITCH_R COLORSWITCH_G COLORSWITCH_B}
   )
   (reset_gm_title
      {gs_title.lbl set_localized_text GAME_MODIFIER}
   )
   (display_color_msg
      ($tspd $mspd $fps)
      {gs_title.lbl set_localized_text
         {sprint
            {localize
               {switch $colormenu
                  (name "os_fontcolortitle")
                  (starpower "os_starpower")
                  (streaklabel "os_streaklabel")
                  (starcounter "os_starcounter")
                  (scorenumframe "os_scorenumframe")
                  (gemcolor "os_gemcolor")
                  (smashercolor "os_smashercolor")
                  (trackrailcolor "os_trackrailcolor")
                  (beatlinecolor "os_beatlinecolor")
               }
            }
            "\n"
            COLORSWITCH_R
            " "
            COLORSWITCH_G
            " "
            COLORSWITCH_B
         }
      }
     {gs_title.lbl set color {pack_color COLORSWITCH_R COLORSWITCH_G COLORSWITCH_B}}
   )
   (set_colors
      {if {$this slider_changed}
         {do
            {switch $colormenu
               (name {set $namecolor_r {* 0.01 {gs_band.sld current}}})
               (starpower {set $starpowercolor_r {* 0.01 {gs_band.sld current}}})
               (streaklabel {set $streaklabel_r {* 0.01 {gs_band.sld current}}})
               (starcounter {set $starcounter_r {* 0.01 {gs_band.sld current}}})
               (scorenumframe {set $scorenumframe_r {* 0.01 {gs_band.sld current}}})
               (gemcolor {set $customgemcolor TRUE} {set $gemcolor_r {* 0.01 {gs_band.sld current}}})
               (smashercolor {set $customsmashercolor TRUE} {set $smashercolor_r {* 0.01 {gs_band.sld current}}})
               (trackrailcolor {set $trackrailcolor_r {* 0.01 {gs_band.sld current}}})
               (beatlinecolor {set $beatlinecolor_r {* 0.01 {gs_band.sld current}}})
            }
            {switch $colormenu
               (name {set $namecolor_g {* 0.01 {gs_guitar.sld current}}})
               (starpower {set $starpowercolor_g {* 0.01 {gs_guitar.sld current}}})
               (streaklabel {set $streaklabel_g {* 0.01 {gs_guitar.sld current}}})
               (starcounter {set $starcounter_g {* 0.01 {gs_guitar.sld current}}})
               (scorenumframe {set $scorenumframe_g {* 0.01 {gs_guitar.sld current}}})
               (gemcolor {set $customgemcolor TRUE} {set $gemcolor_g {* 0.01 {gs_guitar.sld current}}})
               (smashercolor {set $customsmashercolor TRUE} {set $smashercolor_g {* 0.01 {gs_guitar.sld current}}})
               (trackrailcolor {set $trackrailcolor_g {* 0.01 {gs_guitar.sld current}}})
               (beatlinecolor {set $beatlinecolor_g {* 0.01 {gs_guitar.sld current}}})
            }
            {switch $colormenu
               (name {set $namecolor_b {* 0.01 {gs_sfx.sld current}}})
               (starpower {set $starpowercolor_b {* 0.01 {gs_sfx.sld current}}})
               (streaklabel {set $streaklabel_b {* 0.01 {gs_sfx.sld current}}})
               (starcounter {set $starcounter_b {* 0.01 {gs_sfx.sld current}}})
               (scorenumframe {set $scorenumframe_b {* 0.01 {gs_sfx.sld current}}})
               (gemcolor {set $customgemcolor TRUE} {set $gemcolor_b {* 0.01 {gs_sfx.sld current}}})
               (smashercolor {set $customsmashercolor TRUE} {set $smashercolor_b {* 0.01 {gs_sfx.sld current}}})
               (trackrailcolor {set $trackrailcolor_b {* 0.01 {gs_sfx.sld current}}})
               (beatlinecolor {set $beatlinecolor_b {* 0.01 {gs_sfx.sld current}}})
            }
            {$this display_color_msg COLORSWITCH_R COLORSWITCH_G COLORSWITCH_B}
         }
      }
   )
   (slider_select_cancel
      ($component)
      {switch $component
         (gs_guitar.sld {$component set_current [orig_vol]})
         (gs_sfx.sld {$component set_current [orig_vol]})
         (gs_band.sld {$component set_current [orig_vol]})
      }
      {$this update_help_display}
      {$this set_colors}
      {$this display_color_msg COLORSWITCH_R COLORSWITCH_G COLORSWITCH_B}
      kDataUnhandled
   )
   (FOCUS_MSG
      {$this set focus_component {$new_focus name}}
      {$this update_help_display}
   )
   (update_help_display
      {if_else {$this slider_selected}
         {helpbar set_display
            ((fret1 help_confirm)
               (fret2 help_cancel)
               (strum help_adjspd))
         }
         {do
            {if_else {== [focus_component] "gs_stereo.btn"}
               {helpbar set_display
                  ((fret1 help_select)
                     (fret2 help_back)
                     (strum help_updown))
               }
               {helpbar set_display
                  ((fret1 help_select)
                   (fret2 help_back)
                   (strum help_updown))
               }
            }
         }
      }
   )
   (slider_start_msg
      ($component)
      {do
         {switch $component
            (gs_guitar.sld
               {do
                  {play_sfx button_error (volume 1) (stop TRUE)}
                  {$this set_colors}
               }
            )
            (gs_sfx.sld
               {do
                  {play_sfx button_error (volume 1) (stop TRUE)}
                  {$this set_colors}
               }
            )
            (gs_band.sld
               {do
                  {play_sfx button_error (volume 1) (stop TRUE)}
                  {$this set_colors}
               }
            )
         }
      }
   )
   (SELECT_START_MSG
      {switch $component
         (gs_guitar.sld {$this set orig_vol {gs_guitar.sld current}})
         (gs_sfx.sld {$this set orig_vol {gs_sfx.sld current}})
         (gs_band.sld {$this set orig_vol {gs_band.sld current}})
         (gs_stereo.btn {ui push_screen overshell_track_element_list_screen})
      kDataUnhandled
      }
      {$this update_help_display}
      {$this set_colors}
      {$this display_color_msg COLORSWITCH_R COLORSWITCH_G COLORSWITCH_B}
   )
)
#define MODIFIER_SLIDER_HANDLERS
(
   (focus gs_guitar.sld)
   (focus_component "")
   (reset_focus TRUE)
   (orig_vol 0)
   (finish_load
      {gs_band.sld set_num_steps 60}
      {gs_guitar.sld set_num_steps 31}
      {gs_sfx.sld set_num_steps 41} ; was 41 steps, dropped to 31 when disallowing <100%
   )
   (slider_changed
      {'||'
         {!=
            {options get band_volume_idx}
            {gs_guitar.sld current}
         }
         {!=
            {options get guitar_volume_idx}
            {gs_sfx.sld current}
         }
         {!=
            {options get guitar_volume_idx}
            {gs_band.sld current}
         }
      }
   )
   (enter
      {$this overshell_theme}
      {if $towel
         {$this disable gs_guitar.sld}
      }
      {gs_guitar.sld set_current
         {int {+ 0.5 {/ {+ {- $trackspeed 1} 0.5} 0.1}}}
      }
      {gs_sfx.sld set_current
         {int {+ 0.5 {/ {+ {- $speedmod 1} 0.5} 0.05}}}
      }
      {gs_band.sld set_current
         {int {- $emulatefps 1}}
      }
      {stereo.chk set_check $focusmode}
      {gs_stereo.btn set_text "FOCUS MODE"}
      {$this display_speed_msg $trackspeed $speedmod $emulatefps}
   )
   (reset_gm_title
      {gs_title.lbl set_localized_text GAME_MODIFIER}
   )
   (display_speed_msg
      ($tspd $mspd $fps)
      {if_else $focusmode
         {do
            {set $miloskipintro TRUE} {set $skipoutro TRUE} {set $notestreakmod FALSE} {set $sfx FALSE}
         }
         {do
            {set $miloskipintro FALSE} {set $skipoutro FALSE} {set $notestreakmod TRUE} {set $sfx TRUE}
         }
      }
      {gs_title.lbl set_localized_text
         {sprintf {localize speed_msg}
            {int
               {+ 0.5 {* $tspd 100}}
            }
            {int
               {+ 0.5 {* $mspd 100}}
            }
            {int
               $fps
            }
         }
      }
   )
   (set_speeds
      {if {$this slider_changed}
         {do
            {set $trackspeed
               {- {+ 1 {* {gs_guitar.sld current} 0.1}} 0.5}
            }
            {set $speedmod
               {- {+ 1 {* {gs_sfx.sld current} 0.05}} 0.5}
            }
            {set $emulatefps
               {+ 1 {gs_band.sld current}}
            }
            {$this display_speed_msg $trackspeed $speedmod $emulatefps}
         }
      }
   )
   (slider_select_cancel
      ($component)
      {switch $component
         (gs_guitar.sld {$component set_current [orig_vol]})
         (gs_sfx.sld {$component set_current [orig_vol]})
         (gs_band.sld {$component set_current [orig_vol]})
      }
      {$this update_help_display}
      {$this set_speeds}
      {$this display_speed_msg $trackspeed $speedmod $emulatefps}
      kDataUnhandled
   )
   (FOCUS_MSG
      {$this set focus_component {$new_focus name}}
      {$this update_help_display}
   )
   (update_help_display
      {if_else {$this slider_selected}
         {helpbar set_display
            ((fret1 help_confirm)
               (fret2 help_cancel)
               (strum help_adjspd))
         }
         {do
            {if_else {== [focus_component] "gs_stereo.btn"}
               {helpbar set_display
                  ((fret1 help_onoff)
                     (fret2 help_back)
                     (strum help_updown))
               }
               {helpbar set_display
                  ((fret1 help_select)
                   (fret2 help_back)
                   (strum help_updown))
               }
            }
         }
      }
   )
   (slider_start_msg
      ($component)
      {do
         {switch $component
            (gs_guitar.sld
               {do
                  {play_sfx button_error (volume 1) (stop TRUE)}
                  {$this set_speeds}
               }
            )
            (gs_sfx.sld
               {do
                  {play_sfx button_error (volume 1) (stop TRUE)}
                  {$this set_speeds}
               }
            )
            (gs_band.sld
               {do
                  {play_sfx button_error (volume 1) (stop TRUE)}
                  {$this set_speeds}
               }
            )
         }
      }
   )
   (SELECT_START_MSG
      {switch $component
         (gs_guitar.sld {$this set orig_vol {gs_guitar.sld current}})
         (gs_sfx.sld {$this set orig_vol {gs_sfx.sld current}})
         (gs_band.sld {$this set orig_vol {gs_band.sld current}})
         (gs_stereo.btn {stereo.chk toggle} {set $focusmode {stereo.chk get_check}} OVERSHELL_HELP_POP_HANDLER)
      kDataUnhandled
      }
      {$this update_help_display}
      {$this set_speeds}
      {$this display_speed_msg $trackspeed $speedmod $emulatefps}
   )
)
#define SLIDER_LEVELS
(12)
#define AUDIO_SETTINGS_PANEL_HANDLERS
((focus gs_band.sld)
   (focus_component
      "")
   (reset_focus TRUE)
   (orig_vol 0)
   (finish_load
      {gs_band.sld set_num_steps SLIDER_LEVELS}
      {gs_guitar.sld set_num_steps SLIDER_LEVELS}
      {gs_sfx.sld set_num_steps SLIDER_LEVELS})
   (slider_changed
      {'||'
         {!=
            {options get band_volume_idx}
            {gs_band.sld current}}
         {!=
            {options get guitar_volume_idx}
            {gs_guitar.sld current}}
         {!=
            {options get fx_volume_idx}
            {gs_sfx.sld current}}})
   (enter
      {$this overshell_theme}
      {gs_band.sld
         set_current
         {options get band_volume_idx}}
      {gs_guitar.sld
         set_current
         {options get guitar_volume_idx}}
      {gs_sfx.sld
         set_current
         {options get fx_volume_idx}}
#ifndef HX_XBOX
      {stereo.chk
         set_check
         {options get_stereo}}
#endif)
   (set_volumes
      {if
         {$this slider_changed}
         {options
            set
            band_volume_idx
            {gs_band.sld current}}
         {options
            set
            guitar_volume_idx
            {gs_guitar.sld current}}
         {options
            set
            fx_volume_idx
            {gs_sfx.sld current}}})
   (slider_select_cancel
      ($component)
      {switch
         $component
         (gs_band.sld
            {$component
               set_current
               [orig_vol]})
         (gs_guitar.sld
            {$component
               set_current
               [orig_vol]})
         (gs_sfx.sld
            {$component
               set_current
               [orig_vol]})}
      {$this update_help_display}
      kDataUnhandled)
   (FOCUS_MSG
      {$this
         set
         focus_component
         {$new_focus name}}
      {$this update_help_display})
   (update_help_display
      {if_else
         {$this slider_selected}
         {helpbar
            set_display
            ((fret1 help_confirm)
               (fret2 help_cancel)
               (strum help_adjvol))}
#ifndef HX_XBOX
         {do
            {if_else
               {==
                  [focus_component]
                  "gs_stereo.btn"}
               {helpbar
                  set_display
                  ((fret1 help_onoff)
                     (fret2 help_back)
                     (strum help_updown))}
               {helpbar
                  set_display
                  ((fret1 help_select)
                     (fret2 help_back)
                     (strum help_updown))}}}}
#else
          {helpbar
            set_display
            ((fret1 help_select)
               (fret2 help_back)
               (strum help_updown))}
#endif)
   (slider_start_msg
      ($component)
      {do
         ($vol
            {options
               get_volume_from_idx
               {$component current}})
         {switch
            $component
            (gs_band.sld
               {play_sfx
                  slider_band
                  (volume $vol)
                  (stop TRUE)})
            (gs_guitar.sld
               {play_sfx
                  slider_gtr
                  (volume $vol)
                  (stop TRUE)})
            (gs_sfx.sld
               {play_sfx
                  slider_sfx
                  (volume $vol)
                  (stop TRUE)})}})
   (SELECT_START_MSG
      {switch
         $component
         (gs_band.sld
            {$this
               set
               orig_vol
               {gs_band.sld current}})
         (gs_guitar.sld
            {$this
               set
               orig_vol
               {gs_guitar.sld current}})
         (gs_sfx.sld
            {$this
               set
               orig_vol
               {gs_sfx.sld current}})
         (gs_stereo.btn
            {stereo.chk toggle}
            {options
               set_stereo
               {stereo.chk get_check}})
         kDataUnhandled}
      {$this update_help_display}))
{new
   SliderPanel
   overshell_slider
   (file overshell_slider.milo)
   OVERSHELL_THEME_HANDLER
   MODIFIER_SLIDER_HANDLERS
}
{new
   GHScreen
   overshell_slider_screen
   (panels overshell_slider)
   (focus overshell_slider)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
}
{new
   SliderPanel
   track_overshell_slider
   (file overshell_slider.milo)
   OVERSHELL_THEME_HANDLER
   TRACK_SLIDER_HANDLERS
}
{new
   GHScreen
   overshell_track_slider_screen
   (panels track_overshell_slider)
   (focus track_overshell_slider)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
}
{new
   SliderPanel
   color_overshell_slider
   (file overshell_slider.milo)
   OVERSHELL_THEME_HANDLER
   COLOR_SLIDER_HANDLERS
}
{new
   GHScreen
   overshell_color_slider_screen
   (panels color_overshell_slider)
   (focus color_overshell_slider)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
}
{new
   MultiSelectListPanel
   overshell_track_element_list
   (file overshell_list.milo)
   OVERSHELL_THEME_HANDLER
   (focus sel_section.lst)
   (enter
      {do
         {$this overshell_theme}
         {gs_tile5.mesh set_showing FALSE}
         {sel_section.lst set_local_pos -140 0 35}
         {sel_section.lst set_data (elm_name elm_starpower elm_streaklabel
                                    elm_starcounter elm_scorenumframe elm_gemcolor
                                    elm_smashercolor elm_trackrailcolor elm_beatlinecolor)}
         {sel_section.lst set circular 0}
         {gs_title.lbl set_text "TRACK ELEMENT"}
      }
   )
   (SELECT_START_MSG
      {switch {$component selected_sym}
         (elm_name {set $colormenu name})
         (elm_starpower {set $colormenu starpower})
         (elm_streaklabel {set $colormenu streaklabel})
         (elm_starcounter {set $colormenu starcounter})
         (elm_scorenumframe {set $colormenu scorenumframe})
         (elm_gemcolor {set $colormenu gemcolor})
         (elm_smashercolor {set $colormenu smashercolor})
         (elm_trackrailcolor {set $colormenu trackrailcolor})
         (elm_beatlinecolor {set $colormenu beatlinecolor})
      }
      {color_overshell_slider set_colors}
      {ui pop_screen}
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
}
{new
   GHScreen
   overshell_track_element_list_screen
   (panels overshell_track_element_list)
   (focus overshell_track_element_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
}
{new
   MultiSelectListPanel
   overshell_track_list
   (file overshell_list.milo)
   (focus sel_section.lst)
   OVERSHELL_THEME_HANDLER
   (enter
      {$this overshell_theme}
      {gs_tile5.mesh set_showing FALSE}
      {sel_section.lst set_selected $trackmodifierlistpos}
      {sel_section.lst set_local_pos -140 0 35}
      {sel_section.lst set alignment kTopCenter}
      {gs_title.lbl set_text "TRACK MODIFIERS"}
      {sel_section.lst set_data OVERSHELL_TRACK_CONTENTS}
   )
   (SELECT_START_MSG
      {switch {$component selected_sym}
         (os_voidfrets
            {if_else $voidfrets
               {do
                  {play_sfx cheat_off}
                  {set $voidfrets FALSE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
               {do
                  {play_sfx cheat}
                  {set $voidfrets TRUE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
            }
         )
         (os_eyeballgems
            {if_else $eyeballgems
               {do
                  {play_sfx cheat_off}
                  {set $eyeballgems FALSE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
               {do
                  {play_sfx cheat}
                  {set $eyeballgems TRUE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
            }
         )
         (os_cloneherohud
            {if_else $clonehero_hud
               {do
                  {play_sfx cheat_off}
                  {set $clonehero_hud FALSE}
                  {set $trackcamx 1.0}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
               {do
                  {play_sfx cheat}
                  {set $clonehero_hud TRUE}
                  {set $trackcamx 1.3}
                  {set $sppop FALSE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
            }
         )
         (os_brighthopos
            {if_else $brighthopos
               {do
                  {play_sfx cheat_off}
                  {set $brighthopos FALSE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
               {do
                  {play_sfx cheat}
                  {set $brighthopos TRUE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
            }
         )
         (os_darkstrums
            {if_else $darkstrums
               {do
                  {play_sfx cheat_off}
                  {set $darkstrums FALSE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
               {do
                  {play_sfx cheat}
                  {set $darkstrums TRUE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
            }
         )
         (os_gh1track
            {if_else $gh1track
               {do
                  {play_sfx cheat_off}
                  {set $gh1track FALSE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
               {do
                  {play_sfx cheat}
                  {set $gh3track FALSE}
                  {set $gh1track TRUE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
            }
         )
         (os_gh3track
            {if_else $gh3track
               {do
                  {play_sfx cheat_off}
                  {set $gh3track FALSE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
               {do
                  {play_sfx cheat}
                  {set $gh1track FALSE}
                  {set $gh3track TRUE}
                  OVERSHELL_TRACK_RESET_HANDLER
               }
            }
         )
      }
   kDataUnhandled
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
}
{new
   GHScreen
   overshell_track_list_screen
   (panels overshell_track_list)
   (focus overshell_track_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
}
#define OVERSHELL_LIST_CONTENTS
(
   (
       os_focusmode os_skipintro os_skipoutro
       os_sfx os_trkmod os_selhw os_font
       os_whammyfx os_muting os_nofail os_noflames
       os_songtitle os_nametitle os_cleanmtv
       os_brutalmode os_towel os_epictext
       os_notestreakmod os_sppop os_highwayshake
       os_selecttorestart os_drums os_monkeyhead
       os_eyeballhead os_flaminghead os_neckless
       os_performance os_autoplay os_roxbury
    )
)
#define OVERSHELL_LIST_RESET_HANDLER
(
   {set $modifierlistpos {sel_section.lst selected_pos}}
   {if_else {&& {! {$this slider_selected}} $helpentered}
      {do
         {sel_section.lst set_selected $modifierlistpos}
         {$this reset}
      }
      {do
         {sel_section.lst set_data OVERSHELL_LIST_CONTENTS}
         {ui push_screen overshell_help_screen}
      }
   }
)
#define CHEAT_POP
(
   {play_sfx cheat}
   {play_sfx cheat_off}
)
{new
   MultiSelectListPanel
   overshell_list
   (file overshell_list.milo)
   (focus sel_section.lst)
   OVERSHELL_THEME_HANDLER
   (enter
      {$this overshell_theme}
      {gs_tile5.mesh set_showing FALSE}
      {sel_section.lst set_selected $modifierlistpos}
      {sel_section.lst set_local_pos -140 0 35}
      {sel_section.lst set circular 1}
      {sel_section.lst set alignment kTopCenter}
      {gs_title.lbl set_text "MODIFIERS"}
      {sel_section.lst set_data OVERSHELL_LIST_CONTENTS}
   )
   (SELECT_START_MSG
      {switch {$component selected_sym}
      (os_selhw
         {ui push_screen overshell_highway_list_screen}
      )
      (os_font
         {ui push_screen overshell_font_list_screen}
      )
      (os_trkmod
         {ui push_screen overshell_track_list_screen}
      )
      (os_sfx
         {set $sfx {! $sfx}}
         {if_else $sfx
            CHEAT_POP
         }
      )
      (os_sppop
         {set $sppop {! $sppop}}
         {if_else $sppop
            CHEAT_POP
         }
      )
      (os_whammyfx
         {set $whammyfx {! $whammyfx}}
         {if_else $whammyfx
            CHEAT_POP
         }
      )
      (os_muting
         {set $muting {! $muting}}
         {if_else $muting
            CHEAT_POP
         }
      )
      (os_epictext
         {set $epictext {! $epictext}}
         {if_else $epictext
            CHEAT_POP
         }
      )
      (os_autoplay
         {set $autoplay {! $autoplay}}
         {set $gotcha TRUE}
         {if_else $autoplay
            CHEAT_POP
         }
      )
      (os_notestreakmod
         {set $notestreakmod {! $notestreakmod}}
         {if_else $notestreakmod
            CHEAT_POP
         }
      )
      (os_selecttorestart
         {set $selecttorestart {! $selecttorestart}}
         {if_else $selecttorestart
            CHEAT_POP
         }
      )
      (os_towel
         {set $towel {! $towel}}
         {if_else $towel
            CHEAT_POP
         }
      )
      (os_skipintro
         {set $miloskipintro {! $miloskipintro}}
         {if_else $miloskipintro
            CHEAT_POP
         }
      )
      (os_focusmode
         {if_else $focusmode
            {do
               {play_sfx cheat_off}
               {set $focusmode FALSE}
               {set $miloskipintro FALSE}
               {set $skipoutro FALSE}
               {set $notestreakmod TRUE}
               {set $sfx TRUE}
            }
            {do
               {play_sfx cheat}
               {set $focusmode TRUE}
               {set $miloskipintro TRUE}
               {set $skipoutro TRUE}
               {set $notestreakmod FALSE}
               {set $sfx FALSE}
            }
         }
      )
      (os_skipoutro
         {set $skipoutro {! $skipoutro}}
         {if_else $skipoutro
            CHEAT_POP
         }
      )
      (os_noflames
         {set $noflames {! $noflames}}
         {if_else $noflames
            CHEAT_POP
         }
      )
      (os_nofail
         {set $nofail {! $nofail}}
         {if_else $nofail
            CHEAT_POP
         }
      )
      (os_cleanmtv
         {set $cleanmtv {! $cleanmtv}}
         {if_else $cleanmtv
            CHEAT_POP
         }
      )
      (os_brutalmode
         {set $brutalmode {! $brutalmode}}
         {if_else $brutalmode
            CHEAT_POP
         }
      )
      (os_songtitle
         {set $songtitle {! $songtitle}}
         {if_else $songtitle
            CHEAT_POP
         }
      )
      (os_nametitle
         {set $nametitle {! $nametitle}}
         {if_else $nametitle
            CHEAT_POP
         }
      )
      (os_highwayshake
         {set $highwayshake {! $highwayshake}}
         {if_else $highwayshake
            CHEAT_POP
         }
      )
      (os_drums
         {set $drumenabled {! $drumenabled}}
         {if_else $drumenabled
            CHEAT_POP
         }
      )
      (os_horsehead
         {set $cheat_enabled_horse_head_mode {! $cheat_enabled_horse_head_mode}}
         {if_else $cheat_enabled_horse_head_mode
            CHEAT_POP
         }
      )
      (os_monkeyhead
         {if_else {'||' {$cheat_crowd_heads 0} {$cheat_crowd_heads eyeball_crowd_heads}}
            {do
               {play_sfx cheat_off}
               {set $cheat_crowd_heads 0}
            }
            {do
               {play_sfx cheat}
               {set $cheat_crowd_heads monkey_crowd_heads}
            }
         }
      )
      (os_eyeballhead
         {if_else {'||' {$cheat_crowd_heads 0} {$cheat_crowd_heads monkey_crowd_heads}}
            {do
               {play_sfx cheat_off}
               {set $cheat_crowd_heads 0}
            }
            {do
               {play_sfx cheat}
               {set $cheat_crowd_heads eyeball_crowd_heads}
            }
         }
      )
      (os_flaminghead
         {set $cheat_enabled_flaming_head {! $cheat_enabled_flaming_head}}
         {if_else $cheat_enabled_flaming_head
            CHEAT_POP
         }
      )
      (os_neckless
         {set $neckless {! $neckless}}
         {if_else $neckless
            CHEAT_POP
         }
      )
      (os_performance
         {set $cheat_enabled_performance_mode {! $cheat_enabled_performance_mode}}
         {if_else $cheat_enabled_performance_mode
            CHEAT_POP
         }
      )
      (os_roxbury
         {set $barf_cheat {! $barf_cheat}}
         {if_else $barf_cheat
            CHEAT_POP
         }
      )
   }
      OVERSHELL_LIST_RESET_HANDLER
      kDataUnhandled
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
}
{new
   GHScreen
   overshell_list_screen
   (panels overshell_list)
   (focus overshell_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
}
{new
   GHScreen
   overshell_character_list_screen
   (panels overshell_character_list)
   (focus overshell_character_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
}
#define OVERSHELL_DIFF_RESET_HANDLER
(
   {set $difflistpos {sel_section.lst selected_pos}}
   {if_else {&& {! {$this slider_selected}} $helpentered}
      {do
         {sel_section.lst set_selected $difflistpos}
         {$this reset}
      }
      {do
         {ui push_screen overshell_help_screen}
      }
   }
)
{new
   MultiSelectListPanel
   overshell_diff_list
   (file overshell_list.milo)
   OVERSHELL_THEME_HANDLER
   (focus sel_section.lst)
   (enter
   {do
      {$this overshell_theme}
         {gs_tile5.mesh set_showing FALSE}
         {sel_section.lst set_selected $difflistpos}
         {sel_section.lst set_local_pos -140 0 35}
         {sel_section.lst set_data (Easy Medium Hard Expert os_leftyp1 os_leftyp2)}
         {sel_section.lst set circular 0}
         {gs_title.lbl set_text "DIFFICULTY"}
      }
   )
   (SELECT_START_MSG
      {switch {$component selected_sym}
         (os_leftyp2
            {set $leftyp2 {! $leftyp2}}
            {options set_lefty 1 $leftyp2}
            {if_else $leftyp2
               CHEAT_POP
            }
         )
         (os_leftyp1
            {set $leftyp1 {! $leftyp1}}
            {options set_lefty 0 $leftyp1}
            {if_else $leftyp1
               CHEAT_POP
            }
         )
         (Easy
            {{game get_player_config 0} set_difficulty kDifficultyEasy}
            OVERSHELL_HELP_POP_HANDLER
         )
         (Medium
            {{game get_player_config 0} set_difficulty kDifficultyMedium}
            OVERSHELL_HELP_POP_HANDLER
         )
         (Hard
            {{game get_player_config 0} set_difficulty kDifficultyHard}
            OVERSHELL_HELP_POP_HANDLER
         )
         (Expert
            {{game get_player_config 0} set_difficulty kDifficultyExpert}
            OVERSHELL_HELP_POP_HANDLER
         )
      }
      OVERSHELL_DIFF_RESET_HANDLER
   )
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER
}
{new
   GHScreen
   overshell_diff_list_screen
   (panels overshell_diff_list)
   (focus overshell_diff_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   MultiSelectListPanel
   overshell_character_list
   (file overshell_list.milo)
   OVERSHELL_THEME_HANDLER
   (focus sel_section.lst)
   (update_char_pic
   {set $uipicturenumber {+ $uipicturenumber 1}}
            {if {> $uipicturenumber 3} {set $uipicturenumber 0}}
            {gs_pic.tex set_bitmap {sprint "ui/image/ng/photo_" $charactermenu $uipicturenumber "_keep.bmp"}})
   (enter
   {$this overshell_theme}
    {gs_background.view add_object gs_tile5.mesh}
    {gs_tile5.mesh set_local_pos 125 100 100}
    {gs_tile5.mesh set_local_scale_index 0 .9}
    {gs_tile5.mesh set_local_scale_index 2 .5}
    {gs_tile5.mat set diffuse_tex gs_pic.tex}
    {set $uipicturenumber 0}
    {set $charactermenu random}
    {gs_pic.tex set_bitmap {sprint "ui/image/ng/photo_" $charactermenu $uipicturenumber "_keep.bmp"}}
    {if {exists char_pic_task} {delete char_pic_task}} ;second attempt at responsive song progress meters
    {thread_task
         (units kTaskUISeconds)
         (name char_pic_task)
         (script
            {$this update_char_pic}
            {$task sleep 1.3}
            {$task loop}
            )}
   {do
         {sel_section.lst set_local_pos -140 0 35}
         {sel_section.lst set_data (random punk1 punk2 alterna1 alterna2 glam1 glam2 goth2 goth1 metal1 metal2 rockabill1 rockabill2 rock2 rock1 deathmetal1 deathmetal2 classic funk1 grim)}
         {sel_section.lst set circular 1}}
         {gs_title.lbl set_text "CHARACTERS"})
   (SCROLL_MSG
      {set $uipicturenumber {+ $uipicturenumber 1}}
      {if {> $uipicturenumber 3} {set $uipicturenumber 0}}
      {set $charactermenu {$component selected_sym}}
      {gs_pic.tex set_bitmap {sprint "ui/image/ng/photo_" $charactermenu $uipicturenumber "_keep.bmp"}}
      {$this update})
   (SELECT_START_MSG
      {set $forcecharacter TRUE}
      {switch
       {$component selected_sym}
       (random {set $forcecharacter FALSE}
       OVERSHELL_HELP_POP_HANDLER)
       (punk1 {game set_character punk1 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (punk2 {game set_character punk2 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (alterna1 {game set_character alterna1 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (alterna2 {game set_character alterna2 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (glam1 {game set_character glam1 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (glam2 {game set_character glam2 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (goth2 {game set_character goth2 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (goth1 {game set_character goth1 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (metal1 {game set_character metal1 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (metal2 {game set_character metal2 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (rockabill1 {game set_character rockabill1 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (rockabill2 {game set_character rockabill2 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (rock2 {game set_character rock2 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (rock1 {game set_character rock1 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (deathmetal1 {game set_character deathmetal1 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (deathmetal2 {game set_character deathmetal2 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (classic {game set_character classic TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (funk1 {game set_character funk1 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (grim {game set_character grim TRUE}
       OVERSHELL_HELP_POP_HANDLER)}
      kDataUnhandled)
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   GHScreen
   overshell_character_list_screen
   (panels overshell_character_list)
   (focus overshell_character_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   MultiSelectListPanel
   overshell_venue_list
   (file overshell_list.milo)
   OVERSHELL_THEME_HANDLER
   (focus sel_section.lst)
   (enter
   {do
      {$this overshell_theme}
         {gs_tile5.mesh set_showing FALSE}
         {sel_section.lst set_local_pos -140 0 35}
         {sel_section.lst set_data (random battle small1 small2 big theatre fest arena stone)}
         {sel_section.lst set circular 1}}
         {gs_title.lbl set_text "VENUES"})
   (SELECT_START_MSG
      {set $forcevenue TRUE}
      {switch
       {$component selected_sym}
       (random {set $forcevenue FALSE}
       OVERSHELL_HELP_POP_HANDLER)
       (battle {game set_venue battle TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (small1 {game set_venue small1 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (small2 {game set_venue small2 TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (big {game set_venue big TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (theatre {game set_venue theatre TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (fest {game set_venue fest TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (arena {game set_venue arena TRUE}
       OVERSHELL_HELP_POP_HANDLER)
       (stone {game set_venue stone TRUE}
       OVERSHELL_HELP_POP_HANDLER)}
      kDataUnhandled)
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   GHScreen
   overshell_venue_list_screen
   (panels overshell_venue_list)
   (focus overshell_venue_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   MultiSelectListPanel
   overshell_guitar_list
   (file overshell_list.milo)
   OVERSHELL_THEME_HANDLER
   (focus sel_section.lst)
   (enter
   {$this overshell_theme}
   {sel_section.lst set_local_pos -140 0 35}
   ;{practice_sel_section.grp set_local_pos 0 0 20}
   {do
         {gs_tile5.mesh set_showing FALSE}
         {sel_section.lst set_data (
         random lespaul lp_cayenne lp_goddessburst lp_zakk
         sg sg_white sg_gt sg_flames
         flying_v fv_v2 fv_century fv_red
         explorer exp_nat exp_sun exp_white exp_swirl
         lespaul_doublecut lp_dbl_resin
         firebird fb_blue fb_ebony fb_leopard
         epiphone_coronet coronet_cherry coronet_burst coronet_green
         kramer_vanguard van_yellow
         moderne mod_cherry
         corvus cor_nat
         es335 es_cherry
         kramer_650 650_white
         eds eds_white
         lespaul_doublecut_sticker lespaul_sonex lespaul_marauder
         epiphone_casino epiphone_sheraton chet_atkins fish_reward usa_reward
         coffin_reward viking_reward snaketapus_reward eyeball_reward
         battleaxe_reward log_reward scythe #ifndef HX_XBOX guitar_red_octane #endif
         bass_musicman bass_musicman_lava bass_sg_mahogany bass_sg_cream bass_grabber_cherry
         bass_grabber_maple bass_thunderbird_ebony bass_thunderbird_burst bass_hofner)}
         {sel_section.lst set circular 1}}
         {gs_title.lbl set_text "GUITARS"})
   (SELECT_START_MSG
      {set $forceguitar TRUE}
      {switch
       {$component selected_sym}
       (random {set $forceguitar FALSE}
       OVERSHELL_HELP_POP_HANDLER)
       (lespaul {game set_guitar lespaul lp_cherry}
       OVERSHELL_HELP_POP_HANDLER)
       (lp_cherry {game set_guitar lespaul lp_cherry}
       OVERSHELL_HELP_POP_HANDLER)
       (lp_cayenne {game set_guitar lespaul lp_cayenne}
       OVERSHELL_HELP_POP_HANDLER)
       (lp_goddessburst {game set_guitar lespaul lp_goddessburst}
       OVERSHELL_HELP_POP_HANDLER)
       (lp_zakk {game set_guitar lespaul lp_zakk}
       OVERSHELL_HELP_POP_HANDLER)
       (sg {game set_guitar sg sg_cherry}
       OVERSHELL_HELP_POP_HANDLER)
       (sg_cherry {game set_guitar sg sg_cherry}
       OVERSHELL_HELP_POP_HANDLER)
       (sg_white {game set_guitar sg sg_white}
       OVERSHELL_HELP_POP_HANDLER)
       (sg_gt {game set_guitar sg sg_gt}
       OVERSHELL_HELP_POP_HANDLER)
       (sg_flames {game set_guitar sg sg_flames}
       OVERSHELL_HELP_POP_HANDLER)
       (flying_v {game set_guitar flying_v fv_white}
       OVERSHELL_HELP_POP_HANDLER)
       (fv_white {game set_guitar flying_v fv_white}
       OVERSHELL_HELP_POP_HANDLER)
       (fv_v2 {game set_guitar flying_v fv_v2}
       OVERSHELL_HELP_POP_HANDLER)
       (fv_century {game set_guitar flying_v fv_century}
       OVERSHELL_HELP_POP_HANDLER)
       (fv_red {game set_guitar flying_v fv_red}
       OVERSHELL_HELP_POP_HANDLER)
       (explorer {game set_guitar explorer exp_ebony}
       OVERSHELL_HELP_POP_HANDLER)
       (exp_ebony {game set_guitar explorer exp_ebony}
       OVERSHELL_HELP_POP_HANDLER)
       (exp_nat {game set_guitar explorer exp_nat}
       OVERSHELL_HELP_POP_HANDLER)
       (exp_sun {game set_guitar explorer exp_sun}
       OVERSHELL_HELP_POP_HANDLER)
       (exp_white {game set_guitar explorer exp_white}
       OVERSHELL_HELP_POP_HANDLER)
       (exp_swirl {game set_guitar explorer exp_swirl}
       OVERSHELL_HELP_POP_HANDLER)
       (lespaul_doublecut {game set_guitar lespaul_doublecut lp_dbl_white}
       OVERSHELL_HELP_POP_HANDLER)
       (lp_dbl_yellow {game set_guitar lespaul_doublecut lp_dbl_yellow}
       OVERSHELL_HELP_POP_HANDLER)
       (lp_dbl_resin {game set_guitar lespaul_doublecut lp_dbl_resin}
       OVERSHELL_HELP_POP_HANDLER)
       (firebird {game set_guitar firebird fb_burst}
       OVERSHELL_HELP_POP_HANDLER)
       (fb_burst {game set_guitar firebird fb_burst}
       OVERSHELL_HELP_POP_HANDLER)
       (fb_blue {game set_guitar firebird fb_blue}
       OVERSHELL_HELP_POP_HANDLER)
       (fb_ebony {game set_guitar firebird fb_ebony}
       OVERSHELL_HELP_POP_HANDLER)
       (fb_leopard {game set_guitar firebird fb_leopard}
       OVERSHELL_HELP_POP_HANDLER)
       (epiphone_coronet {game set_guitar epiphone_coronet coronet_brown}
       OVERSHELL_HELP_POP_HANDLER)
       (coronet_brown {game set_guitar epiphone_coronet coronet_brown}
       OVERSHELL_HELP_POP_HANDLER)
       (coronet_cherry {game set_guitar epiphone_coronet coronet_cherry}
       OVERSHELL_HELP_POP_HANDLER)
       (coronet_burst {game set_guitar epiphone_coronet coronet_burst}
       OVERSHELL_HELP_POP_HANDLER)
       (coronet_green {game set_guitar epiphone_coronet coronet_green}
       OVERSHELL_HELP_POP_HANDLER)
       (kramer_vanguard {game set_guitar kramer_vanguard van_black}
       OVERSHELL_HELP_POP_HANDLER)
       (van_black {game set_guitar kramer_vanguard van_black}
       OVERSHELL_HELP_POP_HANDLER)
       (van_yellow {game set_guitar kramer_vanguard van_yellow}
       OVERSHELL_HELP_POP_HANDLER)
       (moderne {game set_guitar moderne mod_nat}
       OVERSHELL_HELP_POP_HANDLER)
       (mod_nat {game set_guitar moderne mod_nat}
       OVERSHELL_HELP_POP_HANDLER)
       (mod_cherry {game set_guitar moderne mod_cherry}
       OVERSHELL_HELP_POP_HANDLER)
       (corvus {game set_guitar corvus cor_yellow}
       OVERSHELL_HELP_POP_HANDLER)
       (cor_yellow {game set_guitar corvus cor_yellow}
       OVERSHELL_HELP_POP_HANDLER)
       (cor_nat {game set_guitar corvus cor_nat}
       OVERSHELL_HELP_POP_HANDLER)
       (es335 {game set_guitar es335 es_maple}
       OVERSHELL_HELP_POP_HANDLER)
       (es_maple {game set_guitar es335 es_maple}
       OVERSHELL_HELP_POP_HANDLER)
       (es_cherry {game set_guitar es335 es_cherry}
       OVERSHELL_HELP_POP_HANDLER)
       (kramer_650 {game set_guitar kramer_650 650_stripe}
       OVERSHELL_HELP_POP_HANDLER)
       (650_stripe {game set_guitar kramer_650 650_stripe}
       OVERSHELL_HELP_POP_HANDLER)
       (650_white {game set_guitar kramer_650 650_white}
       OVERSHELL_HELP_POP_HANDLER)
       (eds {game set_guitar eds eds_cherry}
       OVERSHELL_HELP_POP_HANDLER)
       (eds_cherry {game set_guitar eds eds_cherry}
       OVERSHELL_HELP_POP_HANDLER)
       (eds_white {game set_guitar eds eds_white}
       OVERSHELL_HELP_POP_HANDLER)
       (lespaul_doublecut_sticker {game set_guitar lespaul_doublecut_sticker lp_dbl_sticker}
       OVERSHELL_HELP_POP_HANDLER)
       (lespaul_sonex {game set_guitar lespaul_sonex lp_sonex}
       OVERSHELL_HELP_POP_HANDLER)
       (lespaul_marauder {game set_guitar lespaul_marauder lp_marauder}
       OVERSHELL_HELP_POP_HANDLER)
       (epiphone_casino {game set_guitar epiphone_casino casino}
       OVERSHELL_HELP_POP_HANDLER)
       (epiphone_sheraton {game set_guitar epiphone_sheraton sheraton}
       OVERSHELL_HELP_POP_HANDLER)
       (chet_atkins {game set_guitar chet_atkins chet_orange}
       OVERSHELL_HELP_POP_HANDLER)
       (fish_reward {game set_guitar fish_reward fish}
       OVERSHELL_HELP_POP_HANDLER)
       (usa_reward {game set_guitar usa_reward usa}
       OVERSHELL_HELP_POP_HANDLER)
       (coffin_reward {game set_guitar coffin_reward coffin}
       OVERSHELL_HELP_POP_HANDLER)
       (viking_reward {game set_guitar viking_reward viking}
       OVERSHELL_HELP_POP_HANDLER)
       (snaketapus_reward {game set_guitar snaketapus_reward snaketapus}
       OVERSHELL_HELP_POP_HANDLER)
       (eyeball_reward {game set_guitar eyeball_reward eyeball}
       OVERSHELL_HELP_POP_HANDLER)
       (battleaxe_reward {game set_guitar battleaxe_reward battleaxe}
       OVERSHELL_HELP_POP_HANDLER)
       (log_reward {game set_guitar log_reward log}
       OVERSHELL_HELP_POP_HANDLER)
       (scythe {game set_guitar scythe scythe}
       OVERSHELL_HELP_POP_HANDLER)
       (guitar_red_octane {game set_guitar guitar_red_octane guitar_red_octane}
       OVERSHELL_HELP_POP_HANDLER)
       (bass_musicman {game set_guitar bass_musicman bass_music_black}
       OVERSHELL_HELP_POP_HANDLER)
       (bass_musicman_lava {game set_guitar bass_musicman_lava bass_music_lava}
       OVERSHELL_HELP_POP_HANDLER)
       (bass_sg_mahogany {game set_guitar bass_sg_mahogany bass_sg_mahog}
       OVERSHELL_HELP_POP_HANDLER)
       (bass_sg_cream {game set_guitar bass_sg_cream bass_sg_cream}
       OVERSHELL_HELP_POP_HANDLER)
       (bass_grabber_cherry {game set_guitar bass_grabber_cherry bass_grab_cherry}
       OVERSHELL_HELP_POP_HANDLER)
       (bass_grabber_maple {game set_guitar bass_grabber_maple bass_grab_maple}
       OVERSHELL_HELP_POP_HANDLER)
       (bass_thunderbird_ebony {game set_guitar bass_thunderbird_ebony bass_tb_ebony}
       OVERSHELL_HELP_POP_HANDLER)
       (bass_thunderbird_burst {game set_guitar bass_thunderbird_burst bass_tb_burst}
       OVERSHELL_HELP_POP_HANDLER)
       (bass_hofner {game set_guitar bass_hofner bass_hofner}
       OVERSHELL_HELP_POP_HANDLER)}
      kDataUnhandled)
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   GHScreen
   overshell_guitar_list_screen
   (panels overshell_guitar_list)
   (focus overshell_guitar_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new GHPanel overshell_theme_panel
   (file overshell_theme.milo)
   OVERSHELL_THEME_HANDLER
   (focus resume.btn)
   (reset_focus TRUE)
   (enter
      {$this overshell_theme}
      {pause_title.lbl set_text "THEME SELECT"}
      {diff.btn set_showing FALSE}
      {extra2.btn set_showing FALSE}
      {$this disable diff.btn}
      {$this disable extra2.btn})}
{new
   GHScreen
   overshell_theme_list_screen
   (panels overshell_theme_panel)
   (focus overshell_theme_panel) 
   OVERSHELL_SCREEN_COMMON_HANDLER 
   (SELECT_START_MSG
      {switch $component
       (newsong.btn
         {do
         {set $menutheme custom}
         {set $gh3song FALSE}
         {set $gh1track FALSE}
         {set $gh3track FALSE}
         OVERSHELL_HELP_POP_HANDLER})
       (resume.btn
         {do
         {set $menutheme gh1}
         {set $gh1track TRUE}
         {set $gh3song FALSE}
         {set $gh3track FALSE}
         OVERSHELL_HELP_POP_HANDLER})
       (restart.btn
         {do
         {set $menutheme gh2}
         {set $gh3song FALSE}
         {set $gh1track FALSE}
         {set $gh3track FALSE}
         OVERSHELL_HELP_POP_HANDLER})
      (change_speed.btn
         {do
         {set $menutheme 80s}
         {set $gh3song FALSE}
         {set $gh1track FALSE}
         {set $gh3track FALSE}
         OVERSHELL_HELP_POP_HANDLER})
      (section.btn
         {do
         {set $menutheme gh3}
         {set $gh3song TRUE}
         {set $gh3track TRUE}
         OVERSHELL_HELP_POP_HANDLER})
       (quit.btn
         {do
         {set $menutheme gold}
         OVERSHELL_HELP_POP_HANDLER})
       (extra1.btn
         {ui push_screen overshell_song_theme_screen})}
       kDataUnhandled)
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   SliderPanel
   pause_audio_settings_panel
   (file pause_audio_settings_gh1.milo)
   OVERSHELL_THEME_HANDLER
   AUDIO_SETTINGS_PANEL_HANDLERS}
{new
   GHScreen
   pause_audio_settings_screen
   (panels pause_audio_settings_panel)
   (focus pause_audio_settings_panel)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   MultiSelectListPanel
   overshell_highway_list
   (file overshell_list.milo)
   OVERSHELL_THEME_HANDLER
   (focus sel_section.lst)
   (enter
    {$this overshell_theme}
    {gs_background.view add_object gs_tile5.mesh}
    {gs_tile5.mesh set_local_pos 125 100 100}
    {gs_tile5.mesh set_local_scale_index 0 .6}
    {gs_tile5.mesh set_local_scale_index 2 .5}
    {gs_tile5.mat set diffuse_tex gs_pic.tex}
    {set $highwaymenu _black_highway}
    {gs_pic.tex set_bitmap {sprint "track/surfaces/" $highwaymenu "_keep.bmp"}}
   {do
         {sel_section.lst set_local_pos -140 0 35}
         {sel_section.lst set_data (#include ../track/surfaces/highways.dta)}
         {sel_section.lst set circular 1}}
         {gs_title.lbl set_text "SET HIGHWAY"})
   (SELECT_START_MSG
      {set $highway {$component selected_sym}}
      OVERSHELL_HELP_POP_HANDLER
       kDataUnhandled)
    (SCROLL_MSG
      {set $highwaymenu {$component selected_sym}}
      {gs_pic.tex set_bitmap {sprint "track/surfaces/" $highwaymenu "_keep.bmp"}}
      {$this update})
    OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   GHScreen
   overshell_highway_list_screen
   (panels overshell_highway_list)
   (focus overshell_highway_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   GHScreen
   overshell_font_list_screen
   (panels overshell_font_list)
   (focus overshell_font_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   MultiSelectListPanel
   overshell_font_list
   (file overshell_list.milo)
   OVERSHELL_THEME_HANDLER
   (focus sel_section.lst)
   (enter
   {$this overshell_theme}
   {gs_tile5.mesh set_showing FALSE}
   {set $fontmenu blockletters}
   {gs_title.lbl set_type $fontmenu}
   {do
         {sel_section.lst set_local_pos -140 0 35}
         {sel_section.lst set_data (blockletters blockletters_fill clarendon cutout dyingmarker
         gh3veticablackcondensed gunsho hand helveticablack helveticablackcondensed
         helveticathin impact impactor oldenglish postertype receipt rockletters rokk serif tapeworm tapewormscreen)}
         {sel_section.lst set circular 1}}
         {gs_title.lbl set_text "SET FONT"})
   (SELECT_START_MSG
      {set $namefont {$component selected_sym}}
      OVERSHELL_HELP_POP_HANDLER
       kDataUnhandled)
    (SCROLL_MSG
      {set $fontmenu {$component selected_sym}}
      {gs_title.lbl set_type $fontmenu}
      {$this update})
    OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   GHScreen
   overshell_font_list_screen
   (panels overshell_font_list)
   (focus overshell_font_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   GHPanel
   overshell_help_panel
   (file overshell_help.milo)
   OVERSHELL_THEME_HANDLER
   (focus quit.btn)
   (enter
      {$this overshell_theme}
      {pause_controller_msg.lbl set_text
      "This is me warning you that
      if in game, you must back out
      to the nearest loading screen
      for most modifications to
      properly load and enable."}
      {$this set_focus quit.btn}
      {set $helpentered TRUE})}
{new
   GHScreen
   overshell_help_screen
   (panels overshell_help_panel)
   (focus overshell_help_panel)
   OVERSHELL_SCREEN_COMMON_HANDLER
   (SELECT_START_MSG
      {ui pop_screen})
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   GHPanel
   overshell_random_warn_panel
   (file overshell_help.milo)
   OVERSHELL_THEME_HANDLER
   (focus quit.btn)
   (enter
      {$this overshell_theme}
      {pause_controller_msg.lbl set_text
     "This only works on the song
selection screen. Please
enter the song selection
screen before selecting
this option."}
      {$this set_focus quit.btn})}
{new
   GHScreen
   overshell_random_warn_screen
   (panels overshell_random_warn_panel)
   (focus overshell_random_warn_panel)
   OVERSHELL_SCREEN_COMMON_HANDLER
   (SELECT_START_MSG
      {ui pop_screen})
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   MultiSelectListPanel
   overshell_song_theme_list
   (file overshell_list.milo)
   OVERSHELL_THEME_HANDLER
   (focus sel_section.lst)
   (enter
   {$this overshell_theme}
   {gs_tile5.mesh set_showing FALSE}
   {do
         {sel_section.lst set_local_pos -140 0 35}
         {sel_section.lst set_data (os_altsong os_gh3song os_loopsong)}
       {gs_title.lbl set_text "SONG LIST THEMES"}})
   (SELECT_START_MSG
      {switch
       {$component selected_sym}
      (os_gh3song
         {if_else $gh3song
            {do
            {play_sfx cheat_off}
            {set $gh3song FALSE}
            {set $sngthmlistpos {sel_section.lst selected_pos}}
            OVERSHELL_SNGTHM_RESET_HANDLER}
            {do
            {play_sfx cheat}
            {set $gh3song TRUE}
            {set $altsong FALSE}
            {set $sngthmlistpos {sel_section.lst selected_pos}}
            OVERSHELL_SNGTHM_RESET_HANDLER}})
      (os_altsong
         {if_else $altsong
            {do
            {play_sfx cheat_off}
            {set $altsong FALSE}
            {set $sngthmlistpos {sel_section.lst selected_pos}}
            OVERSHELL_SNGTHM_RESET_HANDLER}
            {do
            {play_sfx cheat}
            {set $altsong TRUE}
            {set $gh3song FALSE}
            {set $sngthmlistpos {sel_section.lst selected_pos}}
            OVERSHELL_SNGTHM_RESET_HANDLER}})
      (os_loopsong
         {if_else $loopsong
            {do
            {play_sfx cheat_off}
            {set $loopsong FALSE}
            {set $sngthmlistpos {sel_section.lst selected_pos}}
            OVERSHELL_SNGTHM_RESET_HANDLER}
            {do
            {play_sfx cheat}
            {set $loopsong TRUE}
            {set $sngthmlistpos {sel_section.lst selected_pos}}
            OVERSHELL_SNGTHM_RESET_HANDLER}})}
      kDataUnhandled)
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}
{new
   GHScreen
   overshell_song_theme_screen
   (panels overshell_song_theme_list)
   (focus overshell_song_theme_list)
   OVERSHELL_SCREEN_COMMON_HANDLER
   OVERSHELL_COMMON_BUTTON_DOWN_HANDLER}