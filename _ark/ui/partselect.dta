{new UIPanel qp_selpart_bg_panel
   (file {if_else {== $menutheme 80s} ;which milo file to use based on the 80s theme flag
    selpart_bg_80s.milo selpart_bg.milo}) ;use 80s if 80s use gh2 if not 80s
}
{new GHPanel qp_selpart_panel
   (file {if_else {== $menutheme 80s} ;which milo file to use based on the 80s theme flag
      practice_selpart_80s.milo practice_selpart.milo}) ;use 80s if 80s use gh2 if not 80s
   (focus part0.btn) ;focus on the top button on first entry (guitar/lead)
   (sel_buttons part0.btn part1.btn part2.btn) ;define what buttons are available in this screen (part0 guitar/lead, part1 rhythm/bass, part2 drums)
   (set_button_text ;setup button text, called when screen is entered
      {do
         ($song {gamecfg get_song}) ;setup song variable for use in this block
         {part0.btn set_text {sprint "sg_" {song_provider get_instrument $song 0}}} ;for some reason hmx adds "sg_" to all their instrument localizations. set part 0 label to the 1st instrument track name
         {part1.btn set_text {sprint "sg_" {song_provider get_instrument $song 1}}} ;set part 1 label to the 2nd instrument track name in the song definition
         {part2.btn set_text "sg_drum"} ;always set part 2 label to sg_drum since nothing else uses this
         {if
            {== {song_provider get_instrument $song 1} "rhythm"} ;if the second instrument track in the song definition is rhythm
            {part0.btn set_text "sg_lead"} ;then set part 0 to be "lead" instead of "guitar"
         }
         {if $drumenabled ;if we have drums enabled in overshell (usage of a modifier to enable this code solves debug crash)
            {if_else
               {== {song_provider get_instrument $song 2} "drum"} ;check if the 3rd instrument in the song definition is drum
               {part2.btn set_text "sg_drum"} ;if it is, set the text to drum again
               {part2.btn set_state kDisabled} ;if not, disable the button
            }
            {if_else {== {song_provider get_instrument $song 2} "drum"} ;check if the 3rd instrument in the song definition is drum
               {part2.btn set_text "sg_drum"} ;if it is, set the text to drum again
               {part2.btn set_showing FALSE} ;if not, hide the button
            }
         }
         {if {! $drumenabled} {part2.btn set_state kDisabled} {part2.btn set_showing FALSE}} ;if drum is not enabled, ensure part 2 button is disabled and hidden
      }
   )
   (enter ;when the screen is entered
      {do
         ($song {gamecfg get_song}) ;setup variable for this code block
         {switch {song_provider get_instrument $song 1} ;switch action based on result of which instrument is second in the song definition
            (bass {gamecfg set_track_type bass}) ;if it's bass, set the track type to bass
            (rhythm {gamecfg set_track_type rhythm}) ;if it's rhythm, set the track type to rhythm
         }
         {$this set_button_text} ;run the set_button_text code block above
      }
   )
   (SELECT_START_MSG ;what to do when a button is pressed or a menu item is selected
      {if {== $component part0.btn}
         {switch {gamecfg get mode}
            (career {gamecfg set_track 0 0})
            (quickplay {gamecfg set_track 0 0})
            (multi_vs
               {gamecfg set_track 0 0}
               {gamecfg set_track 1 0}
            )
            (multi_fo
               {gamecfg set_track 0 0}
               {gamecfg set_track 1 0}
            )
            (practice {gamecfg set_track 0 0})
         }
      }
      {if {== $component part1.btn}
         {switch {gamecfg get mode}
            (career {gamecfg set_track 0 1})
            (quickplay {gamecfg set_track 0 1})
            (multi_vs
               {gamecfg set_track 0 1}
               {gamecfg set_track 1 1}
            )
            (multi_fo
               {gamecfg set_track 0 1}
               {gamecfg set_track 1 1}
            )
            (practice {gamecfg set_track 0 1})
         }
      }
      {if {== $component part2.btn}
      {gamecfg set_track 0 2} {set $roygb TRUE} ;if part 2 button is selected, set player 0 to the third instrument in the song definition. also set roygb colors to true since this is drums
      }
      {switch {gamecfg get mode} ;switch action based on result of which game mode is currently being used
          (career {ui goto_screen loading_screen}) ;dx uses career for quickplay, if career, go to the loading screen
          (practice {ui goto_screen practice_sel_section_screen}) ;if practice, go to the select section screen
          (multi_fo
             {ui goto_screen multi_fo_seldiff_screen}
          )
          (multi_vs
             {ui goto_screen multi_vs_seldiff_screen}
          )
      }
   )
}
{new GHScreen qp_selpart_screen
   (panels meta qp_selpart_panel helpbar) ;what panels are included in this screen, in reverse draw order (help bar is always on top)
   (focus qp_selpart_panel) ;which panel to set focus to
   (helpbar ;setup helpbar
      (default ((fret1 help_continue) (fret2 help_back) (strum help_updown)) ;we need continue, go back, and up down for this screen
      )
   )
}